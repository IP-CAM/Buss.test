[LOGIN]

$login_check
$login_check = 'Register</a>';
Not logged in string
This is string is searched in page HTML.
If found, then its assumed that we are not logged in.
Also may be several comma-separated strings or not-strings - {'~Welcome<strong>'}
If not logged in, {$login_url} and {$login_data} will be used for logging in.

$login_url
$login_url = 'http:/habra.com/index.php?route=login';
Login POST URL
This URL will be used to send login POST request.

$login_data
$login_data = 'user=max@gmail.com&password=12345';
Login POST data
This data will be used to send login POST request.

return
if (!find($login_check)) return;
Stop login processing script
It is considered that we are logged in after this command.
Is used to omit next page processing commands if we are already logged in.


[SETTINGS]

$auto_replace
$auto_replace = false;
Automatic replaces
Controls if automatic replaces are applied to HTML pages and import data.
Defaults to {true}.

$http_cache
$http_cache = false;
HTTP requests cache control
By default all HTTP requests are cached for 2 hours.
Set to {false} to disable this.
Change {$hash_cache_maxtime} to alter cache time.

$hash_cache_maxtime
$hash_cache_maxtime = 5 * 60 * 60;
Cache time in seconds.
Defaults to 2 hours.
Use {$http_cache} to disable it completely.

$http_user_agent
$http_user_agent = true;
Requests user agent
By default Google Search Bot user agent is used.
Set this to {$true} to use latest Chrome user agent.
Also you can set your own user agent value.

$http_headers
$http_headers["X-REFERER"] = 'http://google.com';
Custom HTTP headers
Use it to add custom headers to requests.

$http_cookies
$http_cookies = "name=John&id=155";
Custom HTTP cookies
Use it to set custom cookies.
If this variable is not set, usual cookies processing is used (accepting and saving cookies from web-sites).

$http_referer
$http_referer = 'http:/google.com/';
Custome HTTP referer
By default previous page url is used.

$http_auth
$http_auth = "Login:Pass";
HTTP authenfication
Login credentials for sites that use HTTP authenfication protocol.
Too few sites use it in our days.
This is not usual site login.

$http_proxy
$http_proxy = '212.1.104.10:8080';
Custom HTTP proxy.
Not recommended to use until you need to use some particular proxy.
Use {$http_use_proxies} for automatic fresh proxies usage.

$http_use_proxies
$http_use_proxies = true;
Use automatic proxies
Ativates automatic proxies usage mechanism.
Every day fresh proxies are downloaded.

[LIST+SETTINGS]

$nextpage_param_max
$nextpage_param_max = 20;
The greatest allowed value for {$nextpage_param}.
Defaults to {false}.

[LIST]

$products_hash
$products_hash = tag_text(' .product ');
Some strings to check if products data was changed.
If no, the product url will not be added to processing list.

$get_parent_categories_products
$get_parent_categories_products = true;
Usually on automatic tree categories processing products are not taken from category if it has any subcategories. In this case {$inherit_categories} is activate.
Set {$get_parent_categories_products} to {true} to get parent categories products too.
Defaults to {false}.

$nextpage
$nextpage = tags_link(' .paginator a ');
Next processing page(s). May be single URL or array of URLs.
Usually are used for next pages for multipage product list.

$nextpage_param
$nextpage_param = 'page_n';
Name of url parameter for accessing nextpage of product list, {$nextpage} should be blank.
Use it when its hard to find {$nextpage}.

$nextpage_param_step
$nextpage_param_step = 100;
The incremental step for {$nextpage_param}.
Defaults to {1}.

$category_name
$category_name = tag_text(' h1 ');
Current category name for automatic category structure processing.

$category_image
$category_image = tag_image(' .cat_image ');
Current category image for category creation on automatic category structure processing.
If there is no category image at category page, but they are at parent page, use {$subcategories_images}.

$products
$products = tags_link(' .names ');
Products URLs
Products URLs list from the list page.

$subcategories
$subcategories = tags_link(' .subs ');
Subacategories URLs
Products URLs from the category page.
Also may be an array of subcategories blocks HTML. Subcategories URLS, images and names will be extracted from this blocks.

$subcategories_names
$subcategories_names = tags_text(' .subs ');
Subcategories names
Subcategories names from category page.
Use it if there is no category name at subcategories pages.

$subcategories_images
$subcategories_images = tags_image(' .subs ');
Subcategories images
Subcategories images from category page.
Use it if there is no category image at subcategories pages.

$description
$description = tag_html(' .description ');
Category description
Contains category description in HTML format.
Will be used on new category creation.
Automatic description images download is controlled with {$description_images}.
To write several languages, fill it as array: {$description['EN']} = ..., {$description['DE']} = ...


[IMPORT+USER+PRODUCT+TASK+LIST+SETTINGS]

$skip
$skip = true;
Skip the script results processing
No products/tasks will be added at this step if {$skip} was set.

return
return;
Stop script processing and activate {$skip}, no products/tasks will be added at this step.
You may use {return true;} to stop script execution without activating {$skip}.

$category_top
$category_top = false;
Category top menu
Controls if categories are displayed at frontend top menu.
Is used for newly created categories.
Meaningful only for top categories.
Defaults to {true}.

$description_images
$description_images = true;
Load desc images
By default images from descriptions are not loaded and images links to their original location.
Set {$description_images} to {true} to download images to your shop.

page_var
$url = page_var('itemlistUrl');
Extracts simple var from page or json response.

page_vars
$urls = page_vars('href');
Extracts array of simple vars from page or json response.


[IMPORT+USER+PRODUCT+TASK+SETTINGS]

new_product
if (!new_product()) return true;
Checks if the product already exists.
In the example the commands below will not be executed, if the product already exists.

$currency
$currency = 'EUR';
Current source currency. Will be used for automatic currency conversions to your shop.

$image_filename
$image_filename = "$model/image";
Images folder and name
Changes the image files location folder and/or names.
Usage cases:
{$image_filename = 'image';} - call image files {image1.jpg}, {image2.jpg} ...
{$image_filename = "$model/";} - save image files to subfolder called same as model.
{$image_filename = 'ebay/new/product';} - save image files to {ebay/new} subfolder and call them like {product.jpg}
Defaults to {'li/'}

$watermark
$watermark = 'watermark_c.png';
Add watermark to images
Images downloaded will have the watermark applied.
By default watermark should be situated at donor's config folder (i.e. {config/aliexpress.com}).
Letters in filename after underscore set the watermark position:
{c}enter, {l}eft, {r}ight, {t}op, {b}ottom
For example, right-bottom position: {logo_rb.png}

$mask
$mask = 'mask_c.png';
Watermark removal mask
The black areas of the mask will be replaced with pixels from {$clean_main_image} and {$clean_images}.
By default mask should be situated at donor's config folder (i.e. {config/aliexpress.com}).
Letters in filename after underscore set the mask position:
{c}enter, {l}eft, {r}ight, {t}op, {b}ottom
For example, right-bottom position: {mask_rb.png}

$clean_main_image
$clean_main_image = tag_image( '#m_thumb' );
Clean main image for watermark removal
A lot of sites with watermarks has small thumb images without watermarks.
LiveImport can use them to remove watermark.
{$mask} should be used to determine zones for replacement.

$clean_images
$clean_images = tag_images( '.thumbs' );
Clean images for watermark removal
A lot of sites with watermarks has small thumb images without watermarks.
LiveImport can use them to remove watermark.
{$mask} should be used to determine zones for replacement.

$trim_image
$trim_image = array(10, 0, "5%", 0);
Trim image
Array of pixels amount to be trimmed from downloaded images.
Order: (left, top, right, bottom)
If you need to trim equal amount from all edges, you can do:
{$trim_image = "3%";}

$sort_options
$sort_options = true;
Sort options
Sort all product options values at the shop on new option values addition.
Defaults to {false}.

$incoming_language
$incoming_language = 'DE';
Incoming data language
If set, texts will be translated to all languages of your shop with the automatic {Yandex.Translate} service.
Set {$use_google_translate} to {true} to use google demi-automatic translation.

$use_google_translate
$use_google_translate = true;
Use {Google Translate} instead of automatic {Yandex.Translate} service.
This will require some manual help, but gives you ability to control texts quality and prepare texts before their usage.

$min_image_size
$min_image_size = 30000;
Image size restriction
Sets the minimum image size in bytes to be downloaded and used in results. If the image is smaller, it is skipped.

$max_image_size
$max_image_size = 450000;
Image size restriction
Sets the maximum image size in bytes to be downloaded and used in results. If the image is bigger, it is skipped.

$validate_images
$validate_images = true;
Check images
Checks downloaded images if they are valid.
Use it if you get broken images sometimes.
Defaults to {false}.

$update_attributes
$update_attributes = false;
Indicates the {$attributes} update for existing products. Defaults to {true}.

$update_images
$update_images = true;
Indicates the images update for existing products. Defaults to {false}.

$update_categories
$update_categories = true;
Indicates the categories update for existing products. Defaults to {false}. In this case update will occur only additional categories will be added. Set to {-1} to disable categories update at all.

$update_description
$update_description = true;
Indicates the {$name}, {$description}, {$meta_description}, {$meta_keyword}, {$h1}, {$title} and {$tags} update for existing products. Defaults to {false}.

$update_status
$update_status = true;
Indicates the {$status} update for existing products. Defaults to {$false}.

$update_stock_status
$update_stock_status = true;
Indicates the {$stock_status} update for existing products. Defaults to {false}.

$update_price
$update_price = false;
Indicates the {$price} update for existing products. Defaults to {true}.

$update_options
$update_options = false;
Indicates the {$options} update for existing products. Defaults to {true}.

$update_related
$update_related = true;
Indicates the {$related} products update for existing products. Defaults to {$false}.

$update_reviews
$update_reviews = true;
Indicates the {$reviews} update for existing products. Defaults to {$false}.

$update_seo_url
$update_seo_url = true;
Indicates the {$seo_url} update for existing products. Defaults to {false}.

$update_sku
$update_sku = true;
Indicates the {$sku} update for existing products. Defaults to {$false}.

$update_model
$update_model = true;
Indicates the {$model} update for existing products. Defaults to {$false}.

$update_new_price
$update_new_price = false;
Indicates the {$new_price} update for existing products.
{$update_price} should be {true} too for update to occur. 
Defaults to {$true}.

$update_quantity
$update_quantity = true;
Indicates the {$quantity} update for existing products. Defaults to {$false}.

$update_date_available
$update_date_available = true;
Indicates the {$date_available} update for existing products. Defaults to {$false}.

$update_weight
$update_weight = true;
Indicates the {$weight} update for existing products. Defaults to {$false}.

$update_manufacturer
$update_manufacturer = true;
Indicates the {$manufacturer} update for existing products. Defaults to {$false}.


[IMPORT+USER+PRODUCT+TASK]

save_vars
save_vars('var1_name', 'var2_name', ...);
Saves vars to the temp folder. Use {load_vars()} to load them.

load_vars
load_vars('var1_name', 'var2_name', ...)
Loads vars from temp folder.
If the var is saved more then 24 hours ago, it is not loaded.

$new_price_group_id
$new_price_group_id = 2;
Discount price customer group id.
Defaults to {1}.

$sort_order
$sort_order = 20;
Product sort order
Is not updated.

$download
$download = 'http://it-docs.com/new/spec.pdf';
Product download, that will be automatically downloaded if external URL specified.
May be an array of downloads.
Are not updated.

$reviews
$reviews = tags_text(' .reviews ');
Product reviews
Array of product reviews texts. 
If specified, {$reviews_rating} and {$reviews_author} are used.
Are not updated by default. Update is controlled with {$update_reviews}.

$reviews_rating
$reviews_rating = tags_text(' .reviews .rating ');
Array of reviews ratings.
Each rating is number from {1} to {5} stars.

$reviews_author
$reviews_author = tags_text(' .reviews .name ');
Array of reviews authors names.

$product_reward
$product_reward = 15;
Product reward
Number of points needed to buy this item. 
May be an array representing number of points required for each customer group.

$categorizer
$categorizer = $name;
Use categories keywords to automatically determine products categories.
Set to string that will be used for keywords search.
If set to {true}, {$name} + {$description} will be used.
Defaults to {false}.

$id
$id = $model;
String to distinguish products
By default products are distinguished by their URLs. To change this behaviour, set {$id} to some value that makes products different and unique.
If you change the {$id} scheme, you need to delete all previously created products usually.
Defaults to product URL.

$old_id
$old_id = $url;
Old distinguish string for paradigm change
Use it in cases when you need to change {$id} paradigm for already imported products.
Write old {$id} (or {$url}, if you had none) to {$old_id}, and LiveImport will update ids for existing products.

$product_match
$product_match = 'model';
Match existing products
If you need to update products in your shop that was not created by {LiveImport}, use {$product_match}. Set it to the field name that would be matched agains {$id}.
Usually used values: {'product_id'}, {'model'}, {'sku'}, {'name'}.

$related
$related = tags_link(' .similar ');
Related products
Array of products {$id}s of related products. 
If you did not set product {$id}, use product URLs here.
Products should already exist, so you may need do two passes to fill related products.
Are always updated.

$name
$name = tag_text(' h1 ');
Product name
If empty, product is not added.
Is translated with automated translation if specified.
To write several languages, fill it as array: {$name['EN']} = ..., {$name['DE']} = ...
Is not updated by default. Update is controlled with {$update_name}.

$title
$title = "Best $name from $manufacturer in California";
Product SEO title
Is translated with automated translation if specified.
To write several languages, fill it as array: {$name['EN']} = ..., {$name['DE']} = ...
Is not updated by default. Update is controlled with {$update_description}.

$h1
$h1 = "Best $name from $manufacturer in California";
Product SEO H1
Is translated with automated translation if specified.
To write several languages, fill it as array: {$name['EN']} = ..., {$name['DE']} = ...
Is not updated by default. Update is controlled with {$update_description}.

$model
$model = tag_text(' .sku ');
Product model
If empty, sets to product name.
Is not updated by default. Update is controlled with {$update_model}.

$category
$category = tag_text(' .cat ');
Product category
Set this to add product to some category.
May include subcategories in format {'Main category > Subcategory > Subsubcategory'}.
Is prefilled with main category from task properies or category from list processing section.
Is addictive updated by default. Update is controlled with {$update_category}.
{$inherit_categories} controls if products are added automatically to all parent categories of their subcategories.

$categories
$categories[] = 'Books > Bestsellers';
Product additional categories
Add elelements to this array to link product to additional categories.
{$categories} are prefilled with categories specified at entire task.
Are addictive updated by default. Update is controlled with {$update_category}.
{$inherit_categories} controls if products are added automatically to all parent categories of their subcategories.

$inherit_categories
$inherit_categories = true;
Controls if products are added automatically to all parent categories of their subcategories.
Defaults to {false}.

$description
$description = tag_html( '.description ');
Product description
Contains product description in HTML format.
Automatic description images download is controlled with {$description_images}.
To write several languages, fill it as array: {$description['EN']} = ..., {$description['DE']} = ...
Is not updated by default. Update is controlled with {$update_name}.

$meta_description
$meta_description = tag_attr(' [name=description] ', 'content');
Product meta-description
Tags are stripped away automatically.
To write several languages, fill it as array: {$meta_description['EN']} = ..., {$meta_description['DE']} = ...
Is not updated by default. Update is controlled with {$update_name}.

$meta_keyword
$meta_keyword = tag_attr(' [name=keywords] ', 'content');
Product meta-keywords
To write several languages, fill it as array: {$meta_keyword['EN']} = ..., {$meta_keyword['DE']} = ...
Is not updated by default. Update is controlled with {$update_name}.

$seo_url
$seo_url = translit($name);
Product seo path
Defaults to translitted product name plus {$product_id} number.
Is not updated by default. Update is controlled with {$update_seo_url}.

$keyword
$seo_url = translit($name);
Product seo keyword. Synonim to {$seo_url}.

$tags
$tags = 'buy, best, book';
Product tags
To write several languages, fill it as array: {$tags['EN']} = ..., {$tags['DE']} = ...
Is not updated by default. Update is controlled with {$update_name}.

$sku
$sku = tag_text(' .sku ');
Product SKU
Is not visible at frontend of your shop with most of templates.
Is not updated by default. Update is controlled with {$update_sku}.

$upc
$upc = tag_text(' .upc ');
Product UPC
Is not updated.

$ean
$ean = tag_text(' .ean ');
Product EAN
Is not updated.

$jan
$jan = tag_text(' .jan ');
Product JAN
Is not updated.

$isbn
$isbn = tag_text(' .isbn ');
Product ISBN
Is not updated.

$mpn
$mpn = tag_text(' .mpn ');
Product MPN
Is not updated.

$price
$price = tag_text(' .price ');
Product price
Currency is guessed automatically from variable content.
You can set {$currency} variable to recalculate price to currency of your shop automatically. You need to have this currency installed in your shop, values from {System -> Localization -> Currencies} will be used for currency translation.
Is updated by default. Update is controlled with {$update_price}.

$new_price
$new_price = tag_text(' .discount_price ');
Product discount price
Is updated by default. Update is controlled with {$update_new_price}.

$new_price_end
$new_price_end = 3;
Product discount term in days
Use it if you need to set particular discount term.

$location
$location ='California';
Product location
Is not updated.

$tax_class_id
$tax_class_id = 2;
Product tax class id from {System -> Localization -> Taxes -> Tax Classes}.
Defaults to {none}.
Is not updated.

$quantity
$quantity = 0;
Product quantity
Defaults to {1000}.
Is updated by default. Update is controlled with {$update_quantity}.

$minimum
$minimum = 5;
Minimum number of products to order.
Defaults to {1}.
Is not updated.

$subtract
$subtract = false;
Product subtraction
Indicates if purchases are subtracting product quantity.
Defaults to {true}.
Is not updated.

$stock_status_id
$stock_status_id = 9;
Product stock status.
Negative statuses are visible only when {quantity} is {0}.
Defaults to {Out of Stock Status} from {System -> Settings -> Option Tab}.
Is not updated by default. Update is controlled with {$update_stock_status}.

$shipping
$shipping = false;
Product shipping
Indicates if product is shippable.
Defaults to {true}.
Is not updated.

$date_available
$date_available = '2013-03-13';
Date from which products becomes avaible for purchase.
Defaults to today.
Is not updated by default. Update is controlled with {$update_date_available}.

$length
$length = 15;
Product length
Is not updated.

$width
$width = 45;
Product width
Is not updated.

$height
$height = 7;
Product height
Is not updated.

$weight
$weight = 2.6;
Product weight
Is not updated by default. Update is controlled with {$update_weight}.

$length_class_id
$length_class_id = 2;
Product length class
Product length class from {System -> Localization -> Taxes -> Length Classes}
Is not updated.

$weight_class_id
$weight_class_id = 2;
Product weight class
Product weight class from {System -> Localization -> Taxes -> Weight Classes}
Is not updated.

$status
$status = false;
Product visibility
Indicates if product is visible at the shop.
Defaults to {true}.
Is not updated by default. Update is controlled with {$update_status}.

$manufacturer
$manufacturer = tag_text(' .man ');
Product manufacturer.
If manufacturer does not exist it will be created using {$manufacturer_description} and {$manufacturer_image}.
Is not updated by default. Update is controlled with {$update_manufacturer}.

$manufacturer_image
Manufacturer image
Image that will be used for manufacturer creation if current manufacturer do not exist.

$manufacturer_description
Manufacturer description
Description that will be used for manufacturer creation if current manufacturer do not exist.

$product_store
$product_store = array (0,2);
Product stores
Used for multistore. Array of stores ids product will be binded to.
Is not updated.

$points
$points = price * 3;
Product points
Number of points customer will be rewarded on product purchase.
Is not updated.

$main_image
$main_image = tag_image(' .picimg ');
Product image
Main image URL of the product. If empty, first element from {images} will be used.
May be local image path like {'data/books/Energy.jpg'}.
Is not updated by default. Update is controlled with {$update_images}. All images are downloaded again on update.

$images
$images = tags_image(' .pics ');
Product images
Additional images URLs of the product.
May be local images paths like {'data/books/Energy.jpg'}.
Are not updated by default. Update is controlled with {$update_images}. All images are downloaded again on update.

$attributes
$attributes['Main'] = tags_text(' .atable td ');
Product attributes
Array of groups (where title is the key). Each group is array of attributes names and values.
Non existing attributes and groups are created automatically.
May be accessed and manipulated with {attribute()} and {take_attribute()}.
Are updated by default. Update is controlled with {$update_attributes}.

$options
$options['Color'] = tags_text(' .colors ');
Product options
Array of options (where title is the key). Each group is array of option values.
Non existing options and values are created automatically.
Additional options properties are set at {$options_type}, {$options_required}, {$options_price} and {$options_image}.
Are updated by default. Update is controlled with {$update_options}.

$options_type
$options_type = 'checkbox';
Options type
Type of the newly created options, may be {'radio'}, {'image'}, {'select'} or {'checkbox'}.
By default type is intelligently guessed.
May be an array reflecting {$options} structure to set each option type individually.

$options_required
$options_required = false;
Options required flag
Required flag of the newly created options.
Defaults to {true}.
By default type is intelligently guessed.
May be an array reflecting {$options} structure to set each option required flag individually.

$options_price
$options_price['Color'] = tags_text(' .colors .price ');
Options prices
Array with options prices, reflecting the {$options} array structure.
If {$currency} is set, currency translation is performed.
Price formula, if specified is applied.
When this is apropriate, the minimum options price is substracted from options and trasferred to product price.

$options_image
$options_image['Color'] = tags_image(' .colors .image ');
Options images
Array with options images, reflecting the {$options} array structure.
Images are downloaded/updated only for newly created options values.
May be local images paths like {'data/books/Energy.jpg'}.
Option type is set to {'image'} automatically, if {$options_image} for this option is specified.

$options_quantity
$options_quantity['Color'] = tags_text(' .colors .quantity ');
Options quantities
Array with options quantities, reflecting the {$options} array structure.

$product
$product['downloads'] = array(112,114);
Additional product data
This is array of additional data to be supplied to {model_catalog_product->addProduct}. You can write here data for different OpenCart modifications also.
Is not used for product update.

[--------Functions--------]


[LIST+PRODUCT+USER+LOGIN+TASK+IMPORT]

run_js
run_js(!$script)
Execute JavaScript
Executes JavaScript at {$script} variable in virtual machine.
Use {js($var)} function to get the execution results.
If {$script} is omitted, all current page JavaScript code is executed.

js
$counter = js('counter');
Get JavaScript variable
You need to perform {run_js} before using this function

query
$options = query('SELECT * FROM oc_options')->rows;
Execute MySQL query on shop database
Automatically converts {oc_} to shops database prefix {DB_PREFIX}.

this
this('load')->model('localisation/currency');
OpenCart API calls
Use it instead of usual {$this} object.
{$this->load->model('localisation/currency');}
will be transformed into
{this('load')->model('localisation/currency');}

upcase
$text = upcase($text);
Make text upper-case
Supports multilingual symbols.

lowcase
$text = lowcase($text);
Make text lower-case
Supports multilingual symbols.

remove_if
$names = remove_if("John, Mary", $names);
Remove some elements from array
Supports comma-separated keywords.
Supports not-keywords: {"~John"}
Supports grouping: {"John + Show, Mary"}

alert
alert("System is down.");
Send mail to admin of the shop
Also adds warning message to log.

stop_work
stop_work('We got wrong data');
Stops all current data source processing with error message.

translit
$image_filename = translit($name);
Make latin letters text
Converts text to latin lower-case letters with dashes instead of spaces.
Nice for SEO-URLs.

reset
$elem = reset($array);
First element of array

end
$elem = end($array)
Last element of array

trim
$text = trim($text);
Trim spaces and new lines
Trims spaces and new lines from the beginning and end of the text.

find
$check = find('new, good'|,$text);
Checks page HTML or {$text} - if specified for keywords.
Keywords are comma-separated.
Keywords may have not-sign - tilda. Looks like this: {'new, good, ~old'}
Keywords may be grouped with +: {'new, good + nice'}
Returns {$true} if keywords are found, {$false} if no.

replace
$text = replace('before', 'after'|, $text);
Replace text
Changes all {'before'} to {'after'} at {$text} and returns result.
If no {$text} specified, current HTML is used.
If {'after'} is omitted all {'before'} entries are removed.
{'before'} entries may contain {*} - it replaces any number of characters. {replace('<*>')} will remove all tags.

inside
$text = inside('begin', 'end'|, $text);
Text between some strings
Gives the first text inside {'begin'} and {'end'}.
If {'begin'} is {''} the start of text is taken.
If {'end'} is empty or omitted the end of text is taken.

insides
$texts = insides('begin', 'end'|, $text);
Texts between some strings
Gives the texts inside all {'begin'} and {'end'} pairs.

replace_inside
$text = replace_inside('find', 'replace', 'begin', 'end'|,$text);
Replace between some strings
Replace {'find'} to {'replace'} in all entries between {'begin'} and {'end'}.

random
$r = random(|$data);
Random number, element or text
If no {$data} specified - random float number from 0 to 1
If {$data} is some number - random integer from 0 to {$data}
If {$data} is array - random element from array
Also such a variant is supported:
{random ('text1', 'text2', .. 'textN')}
This returns random element.

rreplace
$text = rreplace('KR\d+$', 'No'|, $text);
Replace with regular expressions
<a target='_blank' href='http://rubular.com'>Regular exressions syntax and builder</a>
Search is case case insensitive. You can use {'/'} character without any prefixing.

saveinfo
saveinfo($info, $tag|, $id)
Save info into DB storage
{$info} - data, 2000 chars max
{$tag} - info group name. If first letter is uppercase, info will be saved after donor pass.
{$id} - numeric info ID. If omitted, new one is generated and returned as result.

loadinfo
$text = loadinfo($tag, $id);
Load info from DB storage
Loads info saved with {saveinfo}.

loadinfos
$texts = loadinfos($tag|, $id);
Load infos from DB storage
Loads all info entries saved with {saveinfo} as array.

deleteinfo
deleteinfo($tag|, $id)
Delete info from DB storage
Deletes info saved with {saveinfo}.

set_source
set_source($myhtml);
Set the source for all {tag...} and {inside} functions.

tag_text
$name = tag_text(' .name ');
Text inside tag with CSS selector
Result: {string} or {false}

tags_text
$options["Select"] = tags_text(' .options ');
Text inside tags with CSS selector
Result: {array}

tag_href
$nextpage = tags_href(' .link ');
HREF of the tag
HREF attribute of the tag.
Result is automatically expaded to full url with {url} function.

tags_href
$products = tags_href(' .names ');
HREFs of the tags
HREF attributes of the tags.
Results are automatically expaded to full urls with {urls} function.

tag_link
$nextpage = tags_href(' .link ');
Link of the tag
Searches for URL around the tag (checks the tag, its contents and parents)
Result is automatically expaded to full url with {url} function.

tags_link
$products = tags_link(' .names ');
Links of the tags
Searches for URLs around the tags (checks the tags, their contents and parents)
Results are automatically expaded to full urls with {urls} function.

tag_attr
$main_image = tag_attr(' .image ', 'data-src'|, 'text');
Attribute of the tag
If {$'text'} is specified, tag also need to have {'text'} inside.

tags_attr
$images = tags_attr(' .images ', 'data-src');
Attributes of the tags

tag_html
$description = tag_html(' .description ');
HTML inside the tag
Returns all HTML contained at the tag. Performs closing tags check with {close_tags}.

tags_html
$opts = tags_html(' .options ');
HTMLs inside the tags
Returns array of all HTMLs contained at the tags. Performs closing tags check with {close_tags}.

url
$product_url = url($product_url);
Expand URL to full form
Recommended for use at every link that is not received not from {tag_href} function.

urls
$product_urls = urls($product_urls);
Expand URLs to full form
Recommended for use at every links that are not received not from {tags_href} function.

http
http($url);
Get URL contents
Returns HTML page and sets source to it contents.

http_post
$html = http_post($url, $data)
Posts data with POST request.
{$data} may be an array or string with post data contents.

xlog
xlog('Test message');
Add message to log
Also accepts any type of variable.

xwarn
xwarn('This is emergency!');
Add warning message to log
Will be displayed with red color and be visible in the log.

xnotice
xnotice('Something is a bit wrong');
Add notice message to log
Will be displayed with purple color and be visible in the log.

xsuccess
xsuccess('World is saved');
Add success message to log
Will be displayed with green color and be visible in the log.


[LIST+PRODUCT+USER+TASK+IMPORT]

process_product
process_product();
Process and insert product
Performs product processing and insertion into the shop with the defined product variables.
There is no need to call this function except the cases when you have several products at single product page.

get_product
$product_data = get_product($product_id);
Get product from shop
Returns array with all product data.

shorten_text
$text = shorten_text($text|, $maxlen = 200);
Make the short version of text
Strips text if it is longer then {$maxlen} characters and adds {...} to it.
Respects multilingual characters and tags.

inch_to_cm
$description = inch_to_cm($description);
Convert inches to centimeters
Converts inches to centimeters in the text.

money
$x = money($text);
Extract money numbers 
Removes all non-digital symbols, looks for decimal delimiters and calculate {float} number from {$text}.
May be used for any numbers extraction, not only for money.

unset
unset($images[0]);
Delete element of array

sort
sort($array);
Sort the array

array_merge
$arr3 = array_merge($arr1, $arr2);
Merge 2 arrays
First go all element from {$arr1}, then from {$arr2}.

shred_arrays
$elems = shred_arrays($arr1, $arr2|, $arr3 ...);
Merge arrays by element
Merges any number of arrays, taking first element from first array, second - from second and so on. Then again next element from first array, next from second and so on.

close_tags
$html = close_tags($html);
Check tags opening and closing
Analyzes HTML and makes its tags properly opened and closed. Useful for any HTML piece you are going to insert into your site.
Is applied automatically to {tag_html} result.

tag_image
$main_image = tag_image(' .image ');
Image of the tag.
Looks around the tag (child and parent tags) for image.
Also checks for link to high-res version of image.

tags_image
$images = tags_image(' .images ');
Images of the tags
Looks around the tags (child and parent tags) for images.
Also checks for links to high-res versions of images.

translate
$text = translate($text, 'EN', 'JP');
Translate from {'EN'} to {'JP'}.
If second language is {false}, default shop language is used.

http_get_file
http_get_file($url, $savepath|, $accesspath);
Load file from URL
Saves file to {savepath} and returns its filename.
{accesspath} is added to filename if specified.

product_id
$product_id = product_id(|$id);
Get {$product_id}
Checks if product with such an {$id} was parsed already and returns its {$product_id}
If {$product_match} is specified, also will search among all products in the shop.
By default uses current {$id}.

get_html_images
$html = get_html_images($html);
Load images from HTML
Loads all images from HTML in variable and replaces their URLs to point to your server.


[PRODUCT+USER+TASK+IMPORT]

attribute
$model = attribute('Model');
Get attribute value
Finds attribute with given name in {$attributes} and returns its value.

take_attribute
$quantity = take_attribute('Quantity');
Get and remove attribute
Removes attribute with given name from {$attributes} and returns its value.


[PRODUCT+USER+TASK+LIST]
add_lists
add_lists($urls)
Add list pages to processing queue
All list pages are processed before product pages.

add_products
add_products($urls)
Add products pages to processing queue.

load_spreadsheet
$data = load_spreadsheet ($file|, $start_row = 0, $number_of_rows = false);
Load CSV/Excel spreadsheet


[PRODUCT+USER]

pinside
$elem = pinside('begin', 'end');
{inside} with pos info
Same as {inside}, but found element position info is saved as well.
Is used with {pgroup}.

pinsides
$elements = pinsides('begin', 'end');
{insides} with pos info
Same as {insides}, but found elements position info is saved as well.
Is used with {pgroup}.

pgroup
$attributes = pgroup($groups, $elements, $elements2, $default_group);
Group {pinsides} data for options or attrs.
Merges data harvested with {pinside} and {pinsides} into options or attributes array. {pgroup} uses entries position information to decide to which group element belongs.
Parameters explanation:
{$groups} - options names or attrs groups headers (optional)
{$elements} - options values or attrs names
{$elements2} - options values prices/images or attrs values (optional)
{$default_group} - default group name for elements that do not belong to any group.

find_manufacturer
find_manufacturer();
Search manufacturer in product name
Checks if {$manufacturer} is not defined.
If no, looks for any of manufacturers defined in the shop at product {$name}.
If found, writes result to {$manufacturer}.
If {$model} is empty, sets it to text following manufacturer at product {$name}.

[TODO]
info var
InsertCategory

[============Unused wault==============]
$http_result
if (last_result!=200) DonorStop
Result code of last request

skip
skip = true
Skip the script results processing
No products/tasks will be added at this step if {$skip} was set.

script
script = 'advanced.txt'
Additional script name
Script with such a filename will be executed after section commands.

if
if (name=='Notebook') 
Check the codition and do something

for
for (images) 
Take some action for all elements
Individual element is called as array minus last letter.

StartCommands
StartCommands
Call on {$html} change
Do this command after you change {$html} variable for {$tag_...} to work properly.

DonorStop
DonorStop
Stop the current parsing process

add_tasks
add_tasks type, tasks|, z_order
Add new tasks to processing queue
{$type} - {$'list'} or {$'product'}
{$tasks} - URL or array of URLs
{$z_order} - task priority

nodes
nodes('.blocks')
Get specified tags as XHTML nodes array.
Most commands accept nodes as source.

noko
noko($html)
Return Nokogiri object from source

info
info = tag_text '.path'
Transfer data between tasks
{$info} is variable that is transferred between tasks. You can set it at {$[LIST]} section and read at {$[PRODUCTS]} section.

url
url
Current task URL

html
html
Current task HTML received from {$url}
Line breakes and spaces between tags are removed.

ohtml
ohtml
Current task original HTML.
Current task original HTML received from {$url} - without any modifications.

InsertCategory
InsertCategory
Add category data
This command have the same effect as the end of {$[LIST]} section. All variables that play in this section are processed. 
Usually there is no need to use this command.
Call it if you need to insert several categories at one step.